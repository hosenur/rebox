// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  session       session[]
  account       account[]
  project       project[]

  @@unique([email])
}

model session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  User      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  User         user      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
}

model queue {
  id        String   @id @default(uuid())
  project   project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  status    status   @default(pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum status {
  pending
  cloning
  cloned
  building
  built
  deploying
  deployed
  running
  completed
  failed
}

model project {
  id        String   @id @default(uuid())
  name      String   @unique
  repoURL   String
  repoName  String
  userId    String
  User      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    status   @default(pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  queue     queue[]
}
